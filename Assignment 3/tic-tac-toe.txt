Chris Head
005611217


To start the game off, I essentially followed the tutorial exactly as it was said. First, I made a Board function that created the squares for the game. Later on, I added the details needed in order to keep track of which space was which:


 return (
   <>
     <div className="status">{status}</div>
     <div className="board-row">
       <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
       <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
       <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
     </div>
     <div className="board-row">
       <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
       <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
       <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
     </div>
     <div className="board-row">
       <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
       <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
       <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
     </div>
   </>


Next, I created a Game function, which would call the board function and create the actual game itself, displaying all of the details. This included saving states and keeping track of what moves had been played so far in order to do the time-traveling portion of the game:


export default function Game() {
 const [history, setHistory] = useState([Array(9).fill(null)]);
 const [currentMove, setCurrentMove] = useState(0);
 const xIsNext = currentMove % 2 === 0;
 const currentSquares = history[currentMove];


 function handlePlay(nextSquares) {
  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
  setHistory(nextHistory);
   setCurrentMove(nextHistory.length - 1);
 }


 function jumpTo(nextMove) {
   setCurrentMove(nextMove);
 }


 const moves = history.map((squares, move) => {
   let description;
   if (move > 0) {
     description = 'Go to move #' + move;
   } else {
     description = 'Go to game start';
   }
   return (
     <li key={move}>
       <button onClick={() => jumpTo(move)}>{description}</button>
     </li>
   );
 });




This game function included the jumpTo function and handlePlay function, which allowed us to move to past moves and handle the plays that the function was given. Within the return part of the game function, I added the following code to display the game:


 return (
   <div className="game">
     <div className="game-board">
       <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} currentMove ={currentMove}/>
     </div>
     <div className="game-info">
       <ol>{moves}</ol>
     </div>
   </div>
 );


I then made a calculate winner function to decide when the game was over


function calculateWinner(squares) {
 const lines = [
   [0, 1, 2],
   [3, 4, 5],
   [6, 7, 8],
   [0, 3, 6],
   [1, 4, 7],
   [2, 5, 8],
   [0, 4, 8],
   [2, 4, 6],
 ];
 for (let i = 0; i < lines.length; i++) {
   const [a, b, c] = lines[i];
   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
     return squares[a];
   }
 }






This was called later in the Board function:


 const winner = calculateWinner(squares);
 let status;
 if (winner) {
   status = 'Winner: ' + winner;
 } else {
   status = 'Next player: ' + (xIsNext ? 'X' : 'O');
 }
